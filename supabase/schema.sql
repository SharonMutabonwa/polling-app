-- Create the profiles table
CREATE TABLE profiles (
  id UUID REFERENCES auth.users(id) PRIMARY KEY,
  full_name TEXT,
  email TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable Row Level Security for profiles
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;

-- Policies for profiles
CREATE POLICY "Allow public read access" ON profiles FOR SELECT USING (true);
CREATE POLICY "Allow individual insert access" ON profiles FOR INSERT WITH CHECK (auth.uid() = id);
CREATE POLICY "Allow individual update access" ON profiles FOR UPDATE USING (auth.uid() = id);

-- Create the polls table
CREATE TABLE polls (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  question TEXT NOT NULL,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  user_id UUID REFERENCES auth.users(id)
);

-- Enable Row Level Security for polls
ALTER TABLE polls ENABLE ROW LEVEL SECURITY;

-- Policies for polls
CREATE POLICY "Allow public read access" ON polls FOR SELECT USING (true);
CREATE POLICY "Allow individual insert access" ON polls FOR INSERT WITH CHECK (auth.role() = 'authenticated');
CREATE POLICY "Allow individual update access" ON polls FOR UPDATE USING (auth.uid() = user_id);
CREATE POLICY "Allow individual delete access" ON polls FOR DELETE USING (auth.uid() = user_id);

-- Create the poll_options table
CREATE TABLE poll_options (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  text TEXT NOT NULL,
  poll_id BIGINT REFERENCES polls(id) ON DELETE CASCADE
);

-- Enable Row Level Security for poll_options
ALTER TABLE poll_options ENABLE ROW LEVEL SECURITY;

-- Policies for poll_options
CREATE POLICY "Allow public read access" ON poll_options FOR SELECT USING (true);
CREATE POLICY "Allow poll creator to insert options" ON poll_options FOR INSERT WITH CHECK (auth.uid() = (SELECT user_id FROM polls WHERE id = poll_id));
CREATE POLICY "Allow poll creator to update options" ON poll_options FOR UPDATE USING (auth.uid() = (SELECT user_id FROM polls WHERE id = poll_id));
CREATE POLICY "Allow poll creator to delete options" ON poll_options FOR DELETE USING (auth.uid() = (SELECT user_id FROM polls WHERE id = poll_id));


-- Create the votes table
CREATE TABLE votes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users(id),
  option_id BIGINT REFERENCES poll_options(id) ON DELETE CASCADE,
  poll_id BIGINT REFERENCES polls(id) ON DELETE CASCADE,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  UNIQUE(user_id, poll_id) -- A user can only vote once per poll
);

-- Enable Row Level Security for votes
ALTER TABLE votes ENABLE ROW LEVEL SECURITY;

-- Policies for votes
CREATE POLICY "Allow public read access" ON votes FOR SELECT USING (true);
CREATE POLICY "Allow individual insert access" ON votes FOR INSERT WITH CHECK (auth.uid() = user_id);
CREATE POLICY "Allow users to delete their own votes" ON votes FOR DELETE USING (auth.uid() = user_id);
